<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>JFrog Artifactory Browser</title>
  <!--
    SAP Fioneer JFrog Artifactory Browser
    
    IMPORTANT: This is a template file. Copy it to browse.html and add your tokens.
    
    Instructions:
    1. Copy this file: cp browse.html.example browse.html
    2. Edit browse.html and add your access tokens to the dropdown
    3. browse.html is gitignored to protect your secrets
    
    A standalone web application for browsing and downloading files from JFrog Artifactory.
    
    Features:
    - Browse Artifactory repositories with folder navigation
    - Multiple token support or custom token entry
    - Click files to initiate download via download manager
    - Proxy API calls through server to avoid CORS issues
    - Responsive design with SAP Fioneer branding
    
    Dependencies:
    - Requires server running on https://sap-fioneer-download-manager.cfapps.eu10-005.hana.ondemand.com for API proxy
    - Server endpoint: /api/storage for JFrog API calls
    
    Usage:
    1. Open this file in a web browser (or host it on a web server)
    2. Select or enter Access Token
    3. Enter Repository name (default: "download")
    4. Click Browse to view repository contents
    5. Click on folders to navigate, click on files to download
    
    @author SAP Fioneer Team
    @version 2.0.0
    @updated 2025-01-18
  -->
  <style>
    :root {
      --primary-yellow: #ffcc00;
      --primary-black: #000000;
      --text-primary: #333333;
      --text-secondary: #666666;
      --border-light: #e0e0e0;
      --border-focus: #0b6ed1;
      --bg-white: #ffffff;
      --bg-light: #f8f9fa;
      --success-bg: #d4edda;
      --success-text: #155724;
      --success-border: #c3e6cb;
      --error-bg: #f8d7da;
      --error-text: #721c24;
      --error-border: #f5c6cb;
    }

    * {
      box-sizing: border-box;
    }

    body { 
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      background: #f8f9fa;
      color: var(--text-primary);
      line-height: 1.5;
      padding: 20px;
      margin: 0;
      min-height: 100vh;
    }

    .container { 
      background: var(--bg-white);
      padding: 30px;
      border: 1px solid var(--border-light);
      max-width: 420px;
      margin: 0 auto;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h1 { 
      color: var(--primary-black);
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0 0 32px 0;
      text-align: left;
    }

    .field { 
      margin-bottom: 24px;
    }

    label { 
      display: block;
      font-weight: 600;
      font-size: 0.875rem;
      margin-bottom: 8px;
      color: var(--text-primary);
    }

    input, textarea, select { 
      width: 100%;
      padding: 12px;
      border: 1px solid var(--border-light);
      font-family: inherit;
      font-size: 1rem;
      background: var(--bg-white);
      transition: border-color 0.15s ease-in-out;
    }

    input:focus, textarea:focus, select:focus { 
      outline: none;
      border-color: var(--border-focus);
    }

    .btn { 
      padding: 12px 24px;
      background: var(--primary-yellow);
      color: var(--primary-black);
      border: none;
      border-radius: 24px;
      cursor: pointer;
      font-weight: 600;
      font-size: 1rem;
      font-family: inherit;
      margin-right: 12px;
      margin-bottom: 12px;
      transition: all 0.15s ease-in-out;
    }

    .btn:hover { 
      background: var(--primary-black);
      color: white;
    }

    .btn:disabled { 
      background: #6c757d;
      cursor: not-allowed;
    }

    .btn-secondary {
      background: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background: #545b62;
    }

    .status { 
      padding: 12px 16px;
      margin: 16px 0;
      display: none;
      border: 1px solid;
      border-radius: 4px;
    }

    .success { 
      background: var(--success-bg);
      color: var(--success-text);
      border-color: var(--success-border);
    }

    .error { 
      background: var(--error-bg);
      color: var(--error-text);
      border-color: var(--error-border);
    }

    .breadcrumb {
      background: var(--bg-light);
      padding: 12px 16px;
      border: 1px solid var(--border-light);
      border-radius: 4px;
      margin-bottom: 20px;
      font-size: 0.9rem;
    }

    .breadcrumb-link {
      color: var(--border-focus);
      cursor: pointer;
      text-decoration: none;
      padding: 2px 4px;
      border-radius: 2px;
      transition: background-color 0.15s ease-in-out;
      font-family: inherit;
    }

    .breadcrumb-link:hover {
      background-color: rgba(11, 110, 209, 0.1);
      text-decoration: underline;
    }

    .breadcrumb-separator {
      color: var(--text-secondary);
      margin: 0 4px;
      font-family: inherit;
    }

    .file-list {
      border: 1px solid var(--border-light);
      border-radius: 4px;
      margin-top: 20px;
    }

    .file-item {
      display: flex;
      align-items: center;
      padding: 12px 16px;
      border-bottom: 1px solid var(--border-light);
      cursor: pointer;
      transition: background-color 0.15s ease-in-out;
    }

    .file-item:hover {
      background: var(--bg-light);
    }

    .file-item:last-child {
      border-bottom: none;
    }

    .file-icon {
      width: 20px;
      height: 20px;
      margin-right: 12px;
      flex-shrink: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    
    .file-icon svg {
      width: 100%;
      height: 100%;
    }

    .file-name {
      flex: 1;
      font-size: 0.9rem;
    }

    .file-size {
      color: var(--text-secondary);
      font-size: 0.85rem;
      margin-left: 12px;
    }

    .file-date {
      color: var(--text-secondary);
      font-size: 0.85rem;
      margin-left: 12px;
      white-space: nowrap;
    }

    .loading {
      text-align: center;
      padding: 40px;
      color: var(--text-secondary);
    }

    .hidden { 
      display: none !important;
    }

    .config-section {
      border: 1px solid var(--border-light);
      border-radius: 4px;
      padding: 20px;
      margin-bottom: 20px;
      background: var(--bg-light);
    }

    .inline-fields {
      display: flex;
      gap: 12px;
      align-items: end;
    }

    .inline-fields .field {
      flex: 1;
      margin-bottom: 0;
    }

    .cors-warning {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      color: #856404;
      padding: 16px;
      border-radius: 4px;
      margin-bottom: 20px;
      font-size: 0.9rem;
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      body { padding: 16px; }
      .container { padding: 20px; }
      h1 { font-size: 1.5rem; }
      .inline-fields { flex-direction: column; }
      .file-size, .file-date { display: none; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div style="text-align: center; margin-bottom: 32px;">
      <svg xmlns="http://www.w3.org/2000/svg" width="169" height="16" fill="none">
        <path fill="#FFD43C" d="M135.827 3.481h-3.282V.283h3.282v3.198Zm0 2.92h-3.282v3.2h3.282V6.4Zm0 6.119h-3.282v3.198h3.282V12.52Zm6.28-12.237h-3.283v3.198h3.283V.283Zm0 6.118h-3.283v3.198h3.283V6.401Zm6.28-6.118h-3.283v3.198h3.283V.283Zm0 6.118h-3.283v3.198h3.283V6.401Zm-6.28 6.118h-3.283v3.198h3.283v-3.198Zm6.28 0h-3.283v3.198h3.283v-3.198ZM156.172.283h-3.282v3.198h3.282V.283Zm0 6.118h-3.282v3.198h3.282V6.401Zm0 6.118h-3.282v3.198h3.282v-3.198Zm6.28-12.236h-3.283v3.198h3.283V.283Zm0 6.118h-3.283v3.198h3.283V6.401Zm6.28-6.118h-3.283v3.198h3.283V.283Z"></path>
        <path fill="#000" d="M6.735 16a8.926 8.926 0 0 1-2.334-.285 7.37 7.37 0 0 1-1.879-.782 6.21 6.21 0 0 1-1.451-1.196A7.979 7.979 0 0 1 0 12.207l2.63-1.526c.44.848 1.033 1.497 1.781 1.948.748.45 1.578.676 2.49.676.815 0 1.478-.146 1.99-.437.51-.292.767-.736.767-1.333 0-.596-.273-1.03-.82-1.343-.546-.312-1.341-.607-2.385-.885-.71-.19-1.408-.39-2.094-.6a7.835 7.835 0 0 1-1.848-.824 4.167 4.167 0 0 1-1.326-1.291C.847 6.069.68 5.405.68 4.598c0-.719.14-1.363.418-1.933a4.18 4.18 0 0 1 1.164-1.45C2.758.819 3.358.517 4.057.31 4.757.103 5.535 0 6.391 0c.857 0 1.545.086 2.193.26a7.42 7.42 0 0 1 1.744.696c.515.291.964.629 1.347 1.012s.717.782 1.003 1.195l-2.412 1.79a4.645 4.645 0 0 0-1.68-1.592 4.443 4.443 0 0 0-2.214-.595c-.772 0-1.304.143-1.696.427-.394.285-.59.658-.59 1.12 0 .61.281 1.064.845 1.363.564.298 1.364.586 2.401.864.703.184 1.396.385 2.078.605.682.22 1.295.507 1.837.86a4.3 4.3 0 0 1 1.316 1.323c.334.529.502 1.19.502 1.983 0 .623-.126 1.217-.376 1.78a4.13 4.13 0 0 1-1.144 1.49c-.511.43-1.166.775-1.963 1.033-.797.257-1.745.386-2.845.386h-.002Zm7.058-.295L19.39.222h3.32l5.597 15.483h-3.529l-1.17-3.438h-5.387l-1.222 3.438h-3.205Zm5.284-5.9h3.717l-1.816-5.25h-.042l-1.858 5.25h-.001Zm11.224 5.9V.284h5.753c.836 0 1.643.066 2.423.198s1.468.383 2.067.752a4.07 4.07 0 0 1 1.431 1.51c.355.638.532 1.465.532 2.483s-.188 1.88-.564 2.528a4.135 4.135 0 0 1-1.498 1.521 6.137 6.137 0 0 1-2.099.748c-.776.132-1.557.198-2.343.198h-2.245v5.483H30.3Zm3.457-8.108h2.38c1.079 0 1.843-.193 2.292-.58.449-.386.674-.957.674-1.71 0-.752-.221-1.273-.663-1.662-.443-.39-1.21-.585-2.303-.585h-2.38v4.537Zm14.01 8.108V.284H58.22v2.838h-6.976v3.753h4.97v2.686h-4.97v6.144h-3.477.001ZM60.08 3.082V.395h3.466v2.687H60.08Zm.02 12.624V4.596h3.425v11.11H60.1Zm11.383.234a7.591 7.591 0 0 1-2.078-.295 5.194 5.194 0 0 1-1.88-.972c-.556-.45-1.008-1.044-1.357-1.78-.348-.736-.522-1.646-.522-2.731s.173-1.999.522-2.742c.348-.743.8-1.34 1.358-1.79a5.16 5.16 0 0 1 1.87-.966 7.532 7.532 0 0 1 4.151 0 5.097 5.097 0 0 1 1.868.966c.554.45 1.006 1.048 1.358 1.79.351.743.528 1.657.528 2.742s-.176 1.996-.528 2.731c-.352.736-.803 1.33-1.358 1.78a5.151 5.151 0 0 1-1.869.972 7.54 7.54 0 0 1-2.062.295h-.001Zm0-2.36c.807 0 1.404-.312 1.79-.937.387-.623.58-1.444.58-2.462 0-.454-.045-.886-.131-1.296a3.28 3.28 0 0 0-.418-1.073 2.104 2.104 0 0 0-.736-.717c-.299-.173-.66-.26-1.085-.26-.829 0-1.436.31-1.823.926-.387.617-.579 1.424-.579 2.421 0 .462.044.9.13 1.317.087.417.227.778.418 1.083.192.305.437.548.736.728.3.18.672.27 1.118.27Zm7.82 2.126V4.596h3.446v1.751c.167-.217.372-.441.616-.671.243-.23.53-.443.856-.636a5.098 5.098 0 0 1 1.102-.478 4.625 4.625 0 0 1 1.363-.189c.501 0 .924.064 1.33.189.407.125.757.316 1.05.575.292.257.52.59.684.996.164.407.245.896.245 1.465v8.108H86.57v-7.04c0-.502-.103-.882-.308-1.139-.206-.257-.552-.387-1.039-.387a2.77 2.77 0 0 0-1.29.316c-.407.21-.802.475-1.185.794v7.456h-3.446Zm18.398.234a7.73 7.73 0 0 1-2.166-.305 5.05 5.05 0 0 1-1.858-.982c-.54-.45-.973-1.044-1.3-1.78-.327-.736-.49-1.64-.49-2.711s.187-1.995.564-2.731c.376-.736.85-1.329 1.42-1.78.57-.451 1.19-.776 1.858-.977.668-.2 1.294-.3 1.879-.3.584 0 1.188.086 1.811.259a4.157 4.157 0 0 1 1.692.946c.504.457.92 1.087 1.248 1.887.327.8.491 1.83.491 3.092v.498h-7.55c.09.916.374 1.569.851 1.958.477.39 1.077.585 1.802.585.682 0 1.319-.136 1.91-.407.592-.27 1.083-.58 1.473-.925l1.326 2.003c-1.344 1.112-2.997 1.669-4.96 1.669Zm2.068-6.856c-.167-1.546-.894-2.32-2.182-2.32-.537 0-1.011.182-1.426.544-.413.364-.688.955-.82 1.776h4.428Zm10.274 6.856a7.738 7.738 0 0 1-2.166-.305 5.045 5.045 0 0 1-1.858-.982c-.54-.45-.973-1.044-1.3-1.78-.327-.736-.491-1.64-.491-2.711s.188-1.995.563-2.731c.376-.736.85-1.329 1.421-1.78a5.56 5.56 0 0 1 1.858-.977 6.57 6.57 0 0 1 1.88-.3c.584 0 1.188.086 1.811.259a4.157 4.157 0 0 1 1.692.946c.505.457.92 1.087 1.248 1.887.327.8.49 1.83.49 3.092v.498h-7.549c.09.916.374 1.569.851 1.958.477.39 1.077.585 1.801.585.682 0 1.319-.136 1.912-.407.591-.27 1.082-.58 1.472-.925l1.326 2.003c-1.344 1.112-2.997 1.669-4.96 1.669h-.001Zm2.068-6.856c-.168-1.546-.894-2.32-2.182-2.32-.537 0-1.011.182-1.426.544-.415.364-.688.955-.819 1.776h4.427Zm5.074 6.623V4.597h3.445v1.862h.021a5.57 5.57 0 0 1 .565-.723 4.1 4.1 0 0 1 .793-.666c.306-.2.663-.366 1.071-.498a4.587 4.587 0 0 1 1.414-.199h.115l-.052 2.981a4.047 4.047 0 0 0-.412-.04 7.791 7.791 0 0 0-.486-.021c-.682 0-1.275.152-1.78.457a4.788 4.788 0 0 0-1.249 1.058v6.897h-3.445v.002Z"></path>
      </svg>
    </div>
    
    <h1>JFrog Artifactory Browser</h1>
    
    <div class="config-section">
      <div class="field">
        <label for="artifactoryUrl">Artifactory URL</label>
        <input type="url" id="artifactoryUrl" value="https://fioneer1.jfrog.io/artifactory" placeholder="https://your-company.jfrog.io/artifactory" />
      </div>
      
      <div class="field">
        <label for="repository">Repository</label>
        <input type="text" id="repository" value="download" placeholder="repository-name" />
      </div>
      
      <div class="field">
        <label for="accessToken">Access Token</label>
        <select id="accessToken" onchange="handleTokenChange()">
          <!-- ADD YOUR TOKENS HERE -->
          <!-- Example: <option value="your_token_here">Token Name</option> -->
          <option value="">Custom Token</option>
        </select>
        <textarea id="customToken" placeholder="Enter your custom token here..." rows="3" style="margin-top: 8px;"></textarea>
      </div>
      
      <div class="field">
        <label for="userID">User ID</label>
        <input type="text" id="userID" placeholder="Enter your user ID (e.g., john.doe)" />
      </div>
      
      <div style="display: flex; gap: 12px; flex-wrap: wrap;">
        <button class="btn" onclick="browsePath()">Browse</button>
      </div>
    </div>
    
    <div id="breadcrumb" class="breadcrumb hidden">
      <strong>Path:</strong> <span id="breadcrumbPath">/</span>
    </div>
    
    <div id="fileListContainer" class="hidden">
      <div class="file-list" id="fileList">
        <div class="loading">
          Loading...
        </div>
      </div>
    </div>
  </div>

  <script>
    /**
     * Global state variables
     */
    let currentPath = '';
    let artifactoryConfig = {
      url: '',
      repository: '',
      token: ''
    };

    /**
     * DOM element references
     */
    const elements = {
      artifactoryUrl: document.getElementById('artifactoryUrl'),
      repository: document.getElementById('repository'),
      accessToken: document.getElementById('accessToken'),
      customToken: document.getElementById('customToken'),
      userID: document.getElementById('userID'),
      breadcrumb: document.getElementById('breadcrumb'),
      breadcrumbPath: document.getElementById('breadcrumbPath'),
      fileListContainer: document.getElementById('fileListContainer'),
      fileList: document.getElementById('fileList')
    };

    /**
     * Show status message (logs to console only)
     * @param {string} message - Status message to display
     * @param {string} type - Type of message (success, error, etc.)
     */
    function showStatus(message, type) {
      console.log(`[${type}] ${message}`);
    }

    /**
     * Handle token selection change
     * Resets current path when token is changed
     */
    function handleTokenChange() {
      const isCustom = elements.accessToken.value === '';
      elements.customToken.classList.toggle('hidden', !isCustom);
      if (isCustom) elements.customToken.focus();
      else elements.customToken.value = '';
      
      // Reset current path to root when token changes
      currentPath = '/';
      
      // Clear the file list
      elements.fileListContainer.classList.add('hidden');
      elements.breadcrumb.classList.add('hidden');
    }

    /**
     * Get the currently selected or entered token
     * @returns {string} The access token
     */
    function getCurrentToken() {
      return elements.accessToken.value === '' ? elements.customToken.value.trim() : elements.accessToken.value;
    }

    /**
     * Update artifactory configuration from form inputs
     * @returns {boolean} True if all required fields are filled
     */
    function updateConfig() {
      artifactoryConfig = {
        url: elements.artifactoryUrl.value.trim(),
        repository: elements.repository.value.trim(),
        token: getCurrentToken()
      };
      
      if (!artifactoryConfig.url || !artifactoryConfig.repository || !artifactoryConfig.token) {
        showStatus('Please fill in all required fields (URL, Repository, Token)', 'error');
        return false;
      }
      
      return true;
    }

    /**
     * Update breadcrumb display with clickable path segments
     * @param {string} path - The current path to display
     */
    function updateBreadcrumb(path) {
      const pathSegments = path.split('/').filter(seg => seg);
      
      // If at root, just show root
      if (pathSegments.length === 0) {
        elements.breadcrumbPath.innerHTML = '<a class="breadcrumb-link" onclick="navigateToPath(\'/\');">root</a>';
        elements.breadcrumb.classList.remove('hidden');
        return;
      }
      
      // Start with root
      let breadcrumbHTML = '<a class="breadcrumb-link" onclick="navigateToPath(\'/\');">root</a>';
      
      // Build clickable path segments
      let currentSegmentPath = '';
      pathSegments.forEach((segment, index) => {
        currentSegmentPath += '/' + segment;
        const segmentPath = currentSegmentPath; // Capture for closure
        breadcrumbHTML += `<span class="breadcrumb-separator">/</span><a class="breadcrumb-link" onclick="navigateToPath('${segmentPath}');">${segment}</a>`;
      });
      
      elements.breadcrumbPath.innerHTML = breadcrumbHTML;
      elements.breadcrumb.classList.remove('hidden');
    }

    /**
     * Format file size in human-readable format
     * @param {number} bytes - File size in bytes
     * @returns {string} Formatted file size (e.g., "1.5 MB")
     */
    function formatFileSize(bytes) {
      if (!bytes || bytes === -1) return '';
      if (bytes === 0) return '0 B';
      const k = 1024;
      const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }

    /**
     * Format date string for display
     * @param {string} dateString - ISO date string
     * @returns {string} Formatted date string
     */
    function formatDate(dateString) {
      if (!dateString) return '';
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    /**
     * Create a file/folder list item DOM element
     * @param {Object} item - JFrog API item object
     * @returns {HTMLElement} Clickable div element for the file/folder
     */
    function createFileItem(item) {
      const div = document.createElement('div');
      div.className = 'file-item';
      
      const isFolder = item.folder;
      const fileName = item.uri.substring(1);
      
      // Microsoft Fluent UI inspired icons
      const folderIcon = `<svg viewBox="0 0 20 20" fill="none"><path d="M2 5.5A1.5 1.5 0 0 1 3.5 4H8a1.5 1.5 0 0 1 1.06.44l1.5 1.5A1.5 1.5 0 0 0 11.62 6.5H16.5A1.5 1.5 0 0 1 18 8v7.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 2 15.5v-10z" fill="#FFC83D"/><path d="M2 5.5A1.5 1.5 0 0 1 3.5 4H8a1.5 1.5 0 0 1 1.06.44l1.5 1.5A1.5 1.5 0 0 0 11.62 6.5H16.5A1.5 1.5 0 0 1 18 8v7.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 2 15.5v-10z" stroke="#C78D1A" stroke-width="1"/></svg>`;
      const fileIcon = `<svg viewBox="0 0 20 20" fill="none"><path d="M4 2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.41a2 2 0 0 0-.59-1.42l-3.4-3.4A2 2 0 0 0 12.59 2H4z" fill="#E8E8E8"/><path d="M4 3h8v3.5c0 .83.67 1.5 1.5 1.5H17v8a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z" fill="white"/><path d="M12 3v3.5c0 .83.67 1.5 1.5 1.5H17L12 3z" fill="#C8C8C8"/><path d="M4 2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.41a2 2 0 0 0-.59-1.42l-3.4-3.4A2 2 0 0 0 12.59 2H4z" stroke="#605E5C" stroke-width="1"/></svg>`;
      const icon = isFolder ? folderIcon : fileIcon;
      
      div.innerHTML = `
        <span class="file-icon">${icon}</span>
        <span class="file-name">${fileName}</span>
        <span class="file-size">${isFolder ? '' : formatFileSize(item.size)}</span>
        <span class="file-date">${formatDate(item.lastModified)}</span>
      `;
      
      div.style.cursor = 'pointer';
      
      if (isFolder) {
        div.onclick = () => {
          const newPath = (currentPath + '/' + fileName).replace(/\/+/g, '/');
          navigateToPath(newPath);
        };
        div.title = 'Click to open folder';
      } else {
        div.onclick = () => {
          downloadFile(fileName);
        };
        div.title = 'Click to download file';
      }
      
      return div;
    }

    function renderFileList(files) {
      elements.fileList.innerHTML = '';
      
      if (!files || files.length === 0) {
        elements.fileList.innerHTML = '<div class="loading">No files or folders found</div>';
        return;
      }
      
      // Sort folders first, then files
      files.sort((a, b) => {
        if (a.folder && !b.folder) return -1;
        if (!a.folder && b.folder) return 1;
        return a.uri.localeCompare(b.uri);
      });
      
      files.forEach(file => {
        elements.fileList.appendChild(createFileItem(file));
      });
    }

    /**
     * Browse the current repository from root
     */
    async function browsePath() {
      if (!updateConfig()) return;
      
      await navigateToPath('/');
    }

    /**
     * Navigate to a specific path in the repository
     * Fetches folder contents via proxy API
     * @param {string} path - Path to navigate to
     */
    async function navigateToPath(path) {
      if (!updateConfig()) return;
      
      currentPath = path.startsWith('/') ? path : '/' + path;
      currentPath = currentPath.replace(/\/+/g, '/').replace(/\/$/, '') || '/';
      
      updateBreadcrumb(currentPath);
      
      elements.fileListContainer.classList.remove('hidden');
      elements.fileList.innerHTML = '<div class="loading">Loading...</div>';
      
      try {
        // Use the proxy server to avoid CORS issues
        const cleanPath = currentPath === '/' ? '' : currentPath;
        const proxyUrl = `https://sap-fioneer-download-manager.cfapps.eu10-005.hana.ondemand.com/api/storage?repository=${encodeURIComponent(artifactoryConfig.repository)}&path=${encodeURIComponent(cleanPath)}`;
        
        console.log('=== ARTIFACTORY API REQUEST (via proxy) ===');
        console.log('Config:', artifactoryConfig);
        console.log('Current Path:', currentPath);
        console.log('Clean Path:', cleanPath);
        console.log('Proxy URL:', proxyUrl);
        console.log('Token:', artifactoryConfig.token ? `${artifactoryConfig.token.substring(0, 20)}...` : 'NO TOKEN');
        
        const response = await fetch(proxyUrl, {
          headers: {
            'Authorization': `Bearer ${artifactoryConfig.token}`,
            'Accept': 'application/json'
          }
        });
        
        console.log('=== ARTIFACTORY API RESPONSE ===');
        console.log('Status:', response.status);
        console.log('Status Text:', response.statusText);
        console.log('Headers:', Object.fromEntries(response.headers.entries()));
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Error Response Body:', errorText);
          throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
        }
        
        const data = await response.json();
        console.log('Response Data:', data);
        console.log('Children count:', data.children ? data.children.length : 0);
        console.log('=== END API RESPONSE ===');
        
        if (data.children) {
          renderFileList(data.children);
          showStatus(`Loaded ${data.children.length} items from ${currentPath}`, 'success');
        } else {
          elements.fileList.innerHTML = '<div class="loading">No children found or this is a file</div>';
          showStatus('This appears to be a file, not a folder', 'error');
        }
        
      } catch (error) {
        console.error('=== BROWSE ERROR ===');
        console.error('Error:', error);
        console.error('Error message:', error.message);
        console.error('Error stack:', error.stack);
        console.error('=== END ERROR ===');
        elements.fileList.innerHTML = '<div class="loading">Error loading content</div>';
        showStatus(`Error: ${error.message}`, 'error');
      }
    }

    /**
     * Download a file by opening the download manager in a popup
     * @param {string} fileName - Name of the file to download
     */
    function downloadFile(fileName) {
      if (!updateConfig()) return;
      
      const fullPath = (currentPath + '/' + fileName).replace(/\/+/g, '/');
      const userID = elements.userID.value.trim();
      
      try {
        // Use the same download-page URL pattern as test.html
        let downloadPageUrl = `https://sap-fioneer-download-manager.cfapps.eu10-005.hana.ondemand.com/download-page?filepath=${encodeURIComponent(fullPath)}&token=${encodeURIComponent(artifactoryConfig.token)}`;
        
        // Add user ID if provided
        if (userID) {
          downloadPageUrl += `&user=${encodeURIComponent(userID)}`;
        }
        
        console.log('Opening download page for:', fullPath);
        console.log('User ID:', userID || 'Not provided');
        console.log('Download URL:', downloadPageUrl);
        
        const newWindow = window.open(downloadPageUrl, 'SAPFioneerDownloadManager', 'width=600,height=700,scrollbars=yes,resizable=yes');
        
        if (newWindow) {
          showStatus(`Download manager launched for: ${fileName}`, 'success');
        } else {
          showStatus('Failed to open popup window. Please allow popups for this site.', 'error');
        }
      } catch (error) {
        console.error('Download error:', error);
        showStatus(`Failed to launch download manager: ${error.message}`, 'error');
      }
    }



    /**
     * Initialize page state
     */
    currentPath = '/';
    
    /**
     * Event listener: Reset path when custom token is modified
     */
    elements.customToken.addEventListener('input', () => {
      if (elements.accessToken.value === '') {
        // Reset current path to root when custom token changes
        currentPath = '/';
        
        // Clear the file list
        elements.fileListContainer.classList.add('hidden');
        elements.breadcrumb.classList.add('hidden');
      }
    });
    
    // Show custom token field by default since there are no pre-configured tokens
    elements.customToken.classList.remove('hidden');
  </script>
</body>
</html>
